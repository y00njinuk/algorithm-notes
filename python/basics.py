'''
지수표현방식
- 파이썬에서는 e나 E를 활용하여 지수표현방식을 이용할 수 있습니다.
- e나 E 다음에 오는 수는 10의 지수부를 의미합니다.
ex) 1e9 -> 10의 9제곱 (1,000,000,000)
- 최단 경로 알고리즘에서는 도달할 수 없는 노드에 대하여 최단 거리를 무한(INF)로 설정하곤 합니다.
- 이때 가능한 최댓값이 10억 미만이라면 무한(INF)의 값으로 1e9를 이용할 수 있습니다.
'''
INF = int(1e9) # 기본 자료형이 float이라서 int로 처리
print(INF)

'''
연산자
- 기본적인 나누기(/) 연산자는 실수형으로 반환한다.
- 나머지 연산자 : %
- 거듭제곱 연산자 : **
- 나누기 연산자(몫) : //
'''

'''
리스트
- 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용되는 자료형입니다.
- 리스트는 대괄호([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분합니다.
- 리스트의 원소에 접근할 때는 인덱스(Index) 값을 괄호에 넣습니다.
-> 인덱스는 항상 0부터 시작합니다.
- 리스트의 원소들은 모두 하나의 자료형으로 통일하는 것을 권장한다.
-> 튜플은 그렇지 않으며, 그런 의미로 활용되는 것이 아니다.
'''
a=[3,5,4,3,2]
# C/C++ : int a[] = {3,5,4,3,2};
# Java = int[] a = {3,5,4,3,2};
print(a)

'''
리스트 인덱싱과 슬라이싱
- 인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것이 인덱싱(Indexing)이다.
- 연속적인 위치를 갖는 원소들을 가져와야 할 때 슬라이싱(Slicing)을 이용한다.
-> 끝 인덱스는 실제 인덱스보다 1을 더 크게 설정한다.
'''
# 인덱싱
a=[3, 5, 4, 3, 2]
#  0, 1, 2, 3, 4
# -5,-4,-3,-2,-1

# 슬라이싱
a=[3,5,4,3,2]
print(a[1:5]) # 두 번째 원소부터 마지막 원소까지

'''
리스트 컴프리핸션
- 대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화하는 방법
'''
# 0부터 9까지의 수를 포함하는 리스트
array = [i for i in range(10)]
print(array)

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20)  if i % 2 == 1]
print(array)

# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
print(array)

# 2차원 리스트
n=4
m=3
array = [[0] * m for _ in range(n)]
print(array)

# for문 변수 사용이 필요 없을 때
for _ in range(10):
    print("Hello World..!")

# 리스트 정렬
a = [5,4,3,9,10]
a.sort() # 메서드 : 원본영향 O
print(a)

b = [5,4,3,9,10]
sorted(b) # 내장함수 : 원본영향 X
print(b)

# 리스트에서 특정 원소 모두 제거
a = [1,2,3,4,5,5,5]
remove_set = {3,5}
result = [i for i in a if i not in remove_set]
print(result)

'''
튜플
- 튜플 자료형은 리스트와 유사하지만 다음과 같은 차이가 있다.
- 튜플은 한 번 선언된 값을 변경할 수 없습니다.
- 리스트는 대괄호([])을 이용하지만, 튜플은 소괄호(())을 이용합니다.
- 튜플은 리스트에 비해 상대적으로 공간 효율적입니다.
'''
a = (1,2,3,4)
print(a)
# a[2] = 7 # 불가능

'''
딕셔너리
- 딕셔너리는 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형입니다.
- 사전 자료형은 키와 값의 쌍을 데이터라 기좀, 원하는 변경 불가능한(Immmutable) 자료형을 키로 사용할 수 있습니다.
- 해시 테이블(Hash Table)을 이용하므로 검색 및 수정의 시간복잡도는 O(1)이다.
'''
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'
print(data)

if '사과'  in data:
    print("사과가 존재합니다.")

print(list(data.keys())) # Key만 가져오기
print(list(data.values())) # Value만 가져오기

'''
집합
- 집합은 중복을 허용하지 않으며 순서가 없습니다.
- 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있습니다.
- 딕셔너리와 집합은 순서가 없기 때문에 인덱싱 이용이 불가능하다.
- 집합 리스트 혹은 문자열을 이용해서 초기화할 수 있습니다.
-> 이 때, set() 함수를 이용합니다.
'''
a = set([1,2,3,4,5])
b = set([3,4,5,6,7])
print(a | b) # 합집합
print(a & b) # 교집합
print(a - b) # 차집합

'''
자주 사용되는 표준 입력 방법
- input() : 한 줄의 문자열을 입력받는 함수입니다.
- Map() : 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용합니다.
ex1) 공백을 기준으로 구분된 데이터를 입력받을 때
-> list(map(int, input().split()))
ex2) 공백을 기준으로 구분된 데이터 개수가 많지 않을 때
-> a, b, c = map(int, input().split())
'''
# 데이터의 개수 입력
# n = int(input())
# # 각 데이터를 공백을 기준으로 구분하여 입력
# data = list(map(int, input().split()))
# a,b,c,d,e = map(int, input().split())
# # 입력 : 1 2 3 4 5
# # input().split() : ['1','2','3','4','5']
# # map(int, input.split()) : map([1,2,3,4,5])
# print(n)
# print(data)
# print(a,b,c,d,e)

# 2차원
# n = int(input())
# m = int(input())
# arr = []
# for i in range(n):
#     arr.append(list(map(int, input().split())))

# 문자열 입력받기
import sys
data = sys.stdin.readline().rstrip()
print(data)

'''
자주 사용되는 표준 출력 방법
- 파이썬에서 기본 출력은 print() 함수를 이용합니다.
-> 각 변수를 콤마(,)를 이용하여 띄어쓰기로 구분하여 출력할 수 있습니다.
- print()는 기본적으로 출력 이후에 줄 바꿈을 수행합니다.
-> 줄바꿈을 원치 않는 경우 'end' 속성을 이용할 수 있습니다.
'''
print(8, end=' ')
print(10)

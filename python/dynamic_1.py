'''
다이나믹 프로그래밍
- 다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간을 비약적으로 증가시키는 방법입니다.
- 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 합니다.
- 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성됩니다.
- 다이나믹 프로그래밍은 동적 계획법이라고도 부릅니다.
Q) 프로그래밍 분야에서 동적(Dynamic)이란 어떤 의미인가?
A) 자료구조에서 동적 할당(Dynamic Allocation)은 '프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'을 의미합니다.
A) 반면에 다이나믹 프로그래밍에서 '다이나믹'은 별다른 의미 없이 사용된 단어입니다.
'''
'''
다이나믹 프로그래밍의 조건
1. 최적 부분 구조(Optimal Substructure)
- 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
2. 중복되는 부분문제(Overlapping Subproblem)
- 동일한 작은 문제를 반복적으로 해결해야 한다.
'''

# 피보나치 수열
# 점화식 -> 재귀함수 형태로 풀어나갈 수 있다.
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

'''
- 피보나치 수열의 시간복잡도는 O(2^N)이게 된다.
- 예를 들어, 30번째 피보나치 수를 구하기 위해서는 약 10억 가량의 연산이 수행되어야 한다.
- 만약, 100번째 피보나치 수를 구하려면 얼마나 많은 연산을 수행해야 할까?
    -> 이를 해결하기 위해 메모이제이션(Memoization)을 활용한다.
'''
'''
- 메모이제이션(Memoization)은 다이나믹 프로그래밍을 구현하는 방법 중의 하나이다.
- 한 번 계산한 결과를 메모리 공간에 메모하는 기법입니다.
- 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옵니다.
- 값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 합니다.
'''
'''
- 메모이제이션은 2가지 방식(탑다운, 보텀업)이 존재한다.
- 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식입니다.
    -> 결과 저장용 리스트는 DP 테이블이라고 부릅니다.
- 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미합니다.
    -> 따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아니다.
-> 한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용되지 않을 수도 있습니다.
'''

'''피보나치 수열 (탑다운 방식)'''
# 한 번 계산된 결과를 메오이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료조건 (1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))

'''피보나치 수열 (보텀업 방식)'''
# 앞서 게산된 결과를 저장히기 위한 DP 테이블 초기화
d = [0] * 100
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현
for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]
print(d[n])

'''
다이나믹프로그래밍 vs 분할정복
1. 다이나믹프로그래밍과 분할정복은 모두 최적 부분 구조를 가질 때 사용할 수 있습니다.
    - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
2. 다이나믹 프로그래밍과 분할정복의 차이점은 부분 문제의 중복입니다.
    - 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됩니다.
    - 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않습니다.
3. 분할 정복의 대표적인 예시 : 퀵 정렬
    - 한 번 기준 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준 원소의 위치는 바뀌지 않는다.
    - 분할 이후에 해당 피벗 값을 다시 처리하는 부분 문제는 호출하지 않습니다.
'''

'''
다이나믹 프로그래밍 문제에 접근하는 방법
- 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요합니다.
- 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는 지 검토할 수 있습니다.
    -> 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해봅시다.
- 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있습니다.
- 일반적인 코딩테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많습니다.
'''